contract FreedomOrigins =
  record file_Storage = {
         file_storage_id:int,
         name:int,
         finget_print:hash}
         
  record human = {
      personal_data:personal_Data,
      case_number:string}
      
  record personal_Data = {
      case_number:string,
      document_id:string,
      registry_country:string,
      identity_country:string,
      name:string,
      last_name:string,
      address:string,
      phone_number:string,
      email:string,
      contact:string}

  record platformUser = {
      user_name:string,
      email:string,
      profile:profile,
      unique_address:address}

  record dNA_Analysis = {
      doneDate:string,
      case_number:string,
      snp_result:list(string),
      str_result:list(sTRIndicator)}

  record dNA_Sample = {
      system:system,
      analysis:dNA_Analysis}
      
  record sTRIndicator = {
      name:string,
      value1:int,
      value2:int}
  
  record system = {
      id:int,
      name:string} //Snip o STR

  record profile = {
      id:int,
      name:string}

  datatype event = //tbc
      AddUser(string)
    | AddHuman(string)
    | AskForDNASample(string)
    | AddDNASample(string)
    | FoundDNAMatch(string)
    | Login(address)
    | DNAMatchQuery(address)
  
  record state = {
         active_contract:bool,
         profiles:map(int, profile),
         systems : map(int,system),
         files:map(int,file_Storage),
         humans:map(string, human), //case_number
         lhumans:list(human),
         personal_datas:map(string,personal_Data), //document id
         platform_users:map(address,platformUser),
         dna_samples:map(string,dNA_Sample)} //case_number

  entrypoint version() : int = 1

  stateful entrypoint kill_contract(are_you_sure:string) = 
    require (Call.caller==Contract.creator,"Not allowed")
    require (are_you_sure == "yes","Check your confirmation")
    put(state{active_contract=false})
  
  function isAuthorized() =
    require(Map.member(Call.caller,state.platform_users),"not allowed")
    
  function isAdmin() =
    if(Call.caller!=Contract.creator)
      require(Map.member(Call.caller,state.platform_users),"not allowed")
      require(state.platform_users[Call.caller].profile.name=="Admin","not allowed")

  function isOperator() =
    if(Call.caller!=Contract.creator)
      require(Map.member(Call.caller,state.platform_users),"not allowed")
      require(state.platform_users[Call.caller].profile.name=="Operator","not allowed")

  function isLab() =
    if(Call.caller!=Contract.creator)
      require(Map.member(Call.caller,state.platform_users),"not allowed")
      require(state.platform_users[Call.caller].profile.name=="Lab","not allowed")

  function isViewer() =
    if(Call.caller!=Contract.creator)
      require(Map.member(Call.caller,state.platform_users),"not allowed")
      require(state.platform_users[Call.caller].profile.name=="Viewer","not allowed")

  function isOwner() =
    require (Call.caller==Contract.creator,"Not allowed")
  
  stateful entrypoint init()={active_contract=true, profiles={[1] = {id=1,name="Admin"},[2] = {id=2,name="Operator"},[3] = {id=3,name="Lab"},[4] = {id=4,name="Viewer"}},
    systems = {[1]={id=1,name="SNP"},[2]={id=2,name="STR"}},
    files={},
    humans={},
    lhumans=[],
    personal_datas={},
    platform_users={},
    dna_samples={}}

  stateful entrypoint test_init() = 
    isOwner()
    add_user("mail1@mail.com","Admin",1,ak_2AKzXHEE3bA4s74B1RHj4N1n5tDaNt5rQEruttKSkd8JhhKs6U)
    add_user("mail2@mail.com","Lab",3,ak_22QpWFkBYWBhALduLpr4ZVQ7xMCDB8sF6KN63DrzGtcBniXTha)
    add_user("mail3@mail.com","Operator",2,ak_r96z4YiSFuP5r2rHHJTisCq4puffNCrrPvXSbFgqxHgMf6RHr)
    add_user("mail4@mail.com","Viewer",4,ak_uhxgm72mR1JfuKN3VgZAk4EdmgYj7XEBganik3FRMKXazDkLP)


  function get_human_by_id(document_id_to_find:string) : option(human) =
    switch(Map.lookup(document_id_to_find,state.personal_datas))
      None=>abort("doesn't exist")
      Some(personal_data)=>Map.lookup(personal_data.case_number,state.humans)

  stateful entrypoint add_human(case_number:string, human_to_add:human, personal_data_to_add:personal_Data) = 
    isOperator()
    require(!Map.member(case_number,state.humans),"already exist")
    put(state{humans[case_number]=human_to_add})
    put(state{personal_datas[personal_data_to_add.document_id]=personal_data_to_add})
    put(state{lhumans=human_to_add::state.lhumans})
    Chain.event(AddHuman(case_number))
    true

  stateful entrypoint add_dna_sample(sample_to_add:dNA_Sample,case_number:string) =
    isLab()
    require(Map.member(case_number,state.humans),"doesn't exist")
    put(state{dna_samples[case_number]=sample_to_add})
    Chain.event(AddDNASample(case_number))
    true

  stateful entrypoint ask_for_sample_dna_test(document_id:string) : string = 
    isOperator()
    let human = get_human_by_id(document_id)
    switch (human)
      None=>abort("doesn't exist")
      Some(human)=>
        Chain.event(AskForDNASample(human.case_number)) 
        human.case_number
                


  stateful entrypoint add_user(email_to_add:string, name_to_add:string, profile_id:int, address_to_add:address) = 
    isAdmin()
    require(Map.member(profile_id,state.profiles),"doesn't exist")
    let profile=state.profiles[profile_id]
    let platform_user_to_add =  {user_name=email_to_add, email= email_to_add, profile=profile, unique_address=address_to_add}
    put(state{platform_users[address_to_add]=platform_user_to_add})
    Chain.event(AddUser(email_to_add))     
    true

  function there_is_match_str(str1:list(sTRIndicator),str2:list(sTRIndicator),fail_count:int): bool =
      if (fail_count==3)
        false
      else
        switch(str1)
          [] => fail_count<3
          x::tail=>
            switch(str2)
              [] => fail_count<3
              y::ytail => 
                if(!(x.value2==y.value1||x.value1==y.value2||x.value1==y.value1||x.value2==y.value2))
                  there_is_match_str(tail,ytail,fail_count+1)
                else
                  there_is_match_str(tail,ytail,fail_count)

  function there_is_match_snp(snp1:list(string),snp2:list(string),fail_count:int): bool =
    if (fail_count==4)
      false
    else
      switch(snp1)
        [] => fail_count<4
        x::tail=>
          switch(snp2)
            [] => fail_count<4
            y::ytail => 
              if(x!=y&&(x!="10"&&y=="01"||y=="10"&&x!="01"))
                there_is_match_snp(tail,ytail,fail_count+1)
              else
                there_is_match_snp(tail,ytail,fail_count)
                
  function get_snp_dna_by_case_number(case_number:string):list(string) =
    switch(Map.member(case_number,state.dna_samples))
      false => []
      true => state.dna_samples[case_number].analysis.snp_result
  
  function get_str_dna_by_case_number(case_number:string):list(sTRIndicator) =
    switch(Map.member(case_number,state.dna_samples))
      false => []
      true => state.dna_samples[case_number].analysis.str_result
    

  function try_to_find_snp(snp:list(string), humans_universe:list(human)) : list(human) = 
    switch(humans_universe)
      x::tail => 
        if(there_is_match_snp(snp,get_snp_dna_by_case_number(x.case_number),0))
          x::try_to_find_snp(snp,tail)
        else
          try_to_find_snp(snp,tail)
      []=>[]

  function try_to_find_str(str:list(sTRIndicator), humans_universe:list(human)) : list(human) = 
    switch(humans_universe)
      x::tail => 
        if(there_is_match_str(str,get_str_dna_by_case_number(x.case_number),0))
          x::try_to_find_str(str,tail)
        else
          try_to_find_str(str,tail)
      []=>[]
    
  entrypoint look_for_match(sample_to_find_match:dNA_Sample):list(human) = 
    isOperator()
    isViewer()
    switch(sample_to_find_match.system.name)
      "SNP" => try_to_find_snp(sample_to_find_match.analysis.snp_result,state.lhumans)
      "STR" => try_to_find_str(sample_to_find_match.analysis.str_result,state.lhumans)
  
  stateful entrypoint user_registration(): platformUser =
    isAuthorized()
    Chain.event(Login(Call.caller))
    state.platform_users[Call.caller]

  entrypoint get_humansl():list(human) = 
    isOwner()
    state.lhumans
  
  entrypoint get_humansm():map(string,human) =
    isOwner()
    state.humans
  entrypoint get_dna_samples():map(string,dNA_Sample) =
    isOwner()
    state.dna_samples

  entrypoint get_users():map(address,platformUser) = 
    isOwner()
    state.platform_users

  entrypoint get_total_users():int =
    Map.size(state.platform_users)

  entrypoint get_total_humans():int = 
    Map.size(state.humans)
  entrypoint get_total_registered_samples():int =
    Map.size(state.dna_samples)
  entrypoint get_human_by_case_number(case_number:string):human = 
    isOwner()
    state.humans[case_number]

  entrypoint get_human_dna_by_case_number(case_number:string):dNA_Analysis = 
    isOwner()
    state.dna_samples[case_number].analysis
    //agregar un get user que solo el due√±o de la muestra pueda recuperar junto con su address
    //agregar qeu cuando se hace una busqeuda y hay un match se guarde en la lista de coincidencias? capaz con parameetro especial